/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop_grp_assignment;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class managerEditResident extends javax.swing.JFrame {

    private String residentname;
    private String tpNum;
    private String residentpassword;
    private String contact;
    private String emergencyContact;
    private String email;
    private String birth;
    private String address;
    private String country;
    private String roomType;
    private String roomAssigned;
    
    private String managerName;
    private String managerTPNum;
    private String managerPW;
    private String managerEmail;
    
    public managerEditResident() {
        initComponents();
    }
    
    public managerEditResident(String residentname, String tpnumber, String userpassword ,String contact, String econtact, String email, String birth, String address, String country, String roomtype, String roomassigned, String managername, String managerTPNum, String managerPW, String managerEmail) {
        initComponents();
        this.residentname = residentname;
        this.tpNum = tpnumber;
        this.residentpassword = userpassword;
        this.contact = contact;
        this.emergencyContact = econtact;
        this.email = email;
        this.birth = birth;
        this.address = address;
        this.country = country;
        this.roomType = roomtype;
        this.roomAssigned = roomassigned;
        
        this.managerName = managername;
        this.managerTPNum = managerTPNum;
        this.managerPW = managerPW;
        this.managerEmail = managerEmail;
        
        residentName.setText(this.residentname);
        residentTPNum.setText(this.tpNum);
        residentPassword.setText(this.residentpassword);
        residentContact.setText(this.contact);
        residentEcontact.setText(this.emergencyContact);
        residentEmail.setText(this.email);
        residentBirth.setText(this.birth);
        residentAddress.setText(this.address);
        residentCountry.setText(this.country);
        residentRoomType.setSelectedItem(this.roomType);
        residentRoomNo.setSelectedItem(this.roomAssigned);
        roomNumber.setText(this.roomAssigned);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        residentEcontact = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        residentContact = new javax.swing.JTextField();
        residentTPNum = new javax.swing.JTextField();
        residentName = new javax.swing.JTextField();
        residentEmail = new javax.swing.JTextField();
        residentBirth = new javax.swing.JTextField();
        residentAddress = new javax.swing.JTextField();
        residentCountry = new javax.swing.JTextField();
        savebtn = new javax.swing.JButton();
        residentRoomType = new javax.swing.JComboBox<>();
        residentRoomNo = new javax.swing.JComboBox<>();
        checkbtn = new javax.swing.JButton();
        roomNumber = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        residentPassword = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(80, 118, 135));

        jPanel2.setBackground(new java.awt.Color(56, 75, 112));
        jPanel2.setPreferredSize(new java.awt.Dimension(92, 52));

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jButton1)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jLabel1.setText("Name:");

        jLabel2.setText("TP Number:");

        jLabel3.setText("Emergency Contact:");

        jLabel4.setText("Contact:");

        jLabel5.setText("Email:");

        jLabel6.setText("Birth:");

        jLabel7.setText("Address:");

        jLabel8.setText("Country:");

        jLabel9.setText("Room Type:");

        jLabel10.setText("Room No:");

        residentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                residentNameActionPerformed(evt);
            }
        });

        residentAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                residentAddressActionPerformed(evt);
            }
        });

        savebtn.setText("SAVE");
        savebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebtnActionPerformed(evt);
            }
        });

        residentRoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Single", "Twins", "Triple", "Quad" }));

        residentRoomNo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- None -" }));

        checkbtn.setText("Check");
        checkbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbtnActionPerformed(evt);
            }
        });

        roomNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNumberActionPerformed(evt);
            }
        });

        jLabel11.setText("(DD/MM/YYYY)");

        jLabel12.setText("Password:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel8)
                        .addComponent(jLabel7))
                    .addComponent(jLabel12)
                    .addComponent(jLabel6)
                    .addComponent(jLabel11)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(residentBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(savebtn)
                        .addGap(45, 45, 45))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(residentCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(residentAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(residentName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(residentTPNum, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(residentContact, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(60, 60, 60)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel10)))
                                    .addComponent(residentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(residentEcontact, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(residentEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(residentRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkbtn)
                                    .addComponent(roomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(residentRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(46, 73, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(residentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(residentTPNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(residentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(residentContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(residentRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkbtn)
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(roomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3))
                            .addComponent(residentEcontact, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(residentEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(residentBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(savebtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(residentAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(residentCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(residentRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void savebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebtnActionPerformed
        String currentSelectedRoomType = residentRoomType.getSelectedItem().toString();
        String currentSelectedRoomNumber = residentRoomNo.getSelectedItem() != "- None -" 
                                    ? residentRoomNo.getSelectedItem().toString() 
                                    : roomNumber.getText(); 
        roomNumber.setText(currentSelectedRoomNumber);
        String modifyUser = residentName.getText();
        String currentPassword = residentPassword.getText().trim();
        String currentContact = residentContact.getText();
        String currentEmergencyContact = residentEcontact.getText();
        String currentEmail = residentEmail.getText();
        String currentBirth = residentBirth.getText();
        String currentAddress = residentAddress.getText();
        String currentCountry = residentCountry.getText();
     
        try{
            BufferedReader br = new BufferedReader(new FileReader("residentInfo.txt"));
            List<Map<String, String>> userData = new ArrayList<>();
            String line;
            Map<String, String> currentUser = null;

            while ((line = br.readLine()) != null) {
                if (line.isEmpty() || line.startsWith("---------------------------------------------------------------")) {
                    if (currentUser != null && !currentUser.isEmpty()) { 
                        userData.add(currentUser);
                    }
                    currentUser = new HashMap<>(); 
                    continue; 
                }

                // Parse key-value pairs
                String[] parts = line.split(":", 2);
                if (parts.length == 2) {
                    if (currentUser == null) {
                        currentUser = new HashMap<>(); 
                    }
                    currentUser.put(parts[0].trim(), parts[1].trim());
                }
            }
            if (currentUser != null && !currentUser.isEmpty()) {
                userData.add(currentUser);
            }

            for(Map<String, String> thisUser: userData){
                if (thisUser.get("residentName").equals(modifyUser)) {
                    thisUser.put("roomType", currentSelectedRoomType);
                    if (!currentSelectedRoomNumber.isBlank()) {
                        thisUser.put("roomAssigned", currentSelectedRoomNumber);
                    } else {
                        currentSelectedRoomNumber = thisUser.get("roomAssigned"); 
                    }
                    
                    if(currentPassword.isEmpty()){
                        JOptionPane.showMessageDialog(this, "Password cannot be empty.");
                        return;
                    }else if(currentPassword.length() < 8){
                        JOptionPane.showMessageDialog(this, "Password must be at least 8 characters long.");
                        return;
                    }else{
                        thisUser.put("password", currentPassword);
                        thisUser.put("rePassword", currentPassword);
                    } 
                    thisUser.put("contact", currentContact);
                    thisUser.put("eContact",currentEmergencyContact);
                    thisUser.put("email",currentEmail);
                    thisUser.put("birth", currentBirth);
                    thisUser.put("address",currentAddress);
                    thisUser.put("country", currentCountry);
                    break; 
                }
            }
            
            br.close();
            
            BufferedReader br2 = new BufferedReader(new FileReader("availableRooms.txt"));
            String lines;
            LinkedHashMap<String, String> availableRooms = new LinkedHashMap<>();
        
            
            while((lines = br2.readLine()) != null){
                String[] roomInfo = lines.split(":", 2);
                if(roomInfo.length == 2){   
                    String roomType = roomInfo[0].trim().toLowerCase();
                    String rooms = roomInfo[1].trim();
                    availableRooms.put(roomType, rooms);
                }
            }
            
            if (availableRooms.containsKey(currentSelectedRoomType.toLowerCase())) {
                String rooms = availableRooms.get(currentSelectedRoomType.toLowerCase());
                String[] roomArray = rooms.split(",");

                List<String> roomList = new ArrayList<>(Arrays.asList(roomArray));
                roomList.remove(currentSelectedRoomNumber); 

                String updatedRooms = String.join(",", roomList);
                availableRooms.put(currentSelectedRoomType.toLowerCase(), updatedRooms);  // Update the map with the new room list
            }
            
            br2.close();

            BufferedReader br3 = new BufferedReader(new FileReader ("roomrateInfo.txt"));
            String roomRateLines;
            String inFileRoomType = null;
             Map<String, Integer> roomRates = new HashMap<>();
            int roomRate = 0;
            
            while((roomRateLines = br3.readLine()) != null){
                if(roomRateLines.startsWith("RoomType:")){
                    inFileRoomType = roomRateLines.split(":", 2)[1].trim();
                }else if(roomRateLines.startsWith("Rate:")){
                    roomRate = Integer.parseInt(roomRateLines.split(":", 2)[1].trim());
                    
                    if(inFileRoomType !=  null){
                        roomRates.put(inFileRoomType, roomRate);
                        inFileRoomType = null;
                    }
                }
            }
            
            br3.close();
            
            BufferedReader br4 = new BufferedReader(new FileReader("userPayment.txt"));
            String paymentLines;
            String paymentName;
            int newAmount = 0;
            boolean foundUser = false;
            boolean reachPaymentSection = false;
            StringBuilder updatedUserContent = new StringBuilder();
            LocalDate currentDate = LocalDate.now();


            while((paymentLines = br4.readLine()) != null){

                if(paymentLines.startsWith("residentName:")){
                    paymentName = paymentLines.split(":", 2)[1].trim();

                    if (paymentName.equalsIgnoreCase(modifyUser)) {
                        foundUser = true;  
                    } else {
                        foundUser = false;
                    }
                }
                
                if(foundUser){
                    if(paymentLines.startsWith("Room Type:")){
                        updatedUserContent.append("Room Type: ").append(currentSelectedRoomType).append("\n");
                        continue;
                    }
                    
                    if(paymentLines.startsWith("Room No:")){
                        updatedUserContent.append("Room No: ").append(currentSelectedRoomNumber).append("\n");
                        continue;
                    }
                    
                    if(paymentLines.startsWith("Payments:")){
                        reachPaymentSection = true;
                        updatedUserContent.append("Payments: ").append("\n");
                        continue;
                    }
                    
                    if(reachPaymentSection){
                        
                        if (paymentLines.trim().isEmpty()) {
                            updatedUserContent.append("\n");
                            continue;
                        }
                        
                        if(paymentLines.startsWith("-------------------------------------------------------")){
                            reachPaymentSection = false; 

                        }else{
                            String[] paymentParts = paymentLines.split(":", 2);
                            
                            if(paymentParts.length > 1){
                                String paymentDates = paymentParts[0].trim();
                                String[] paymentDetails = paymentParts[1].trim().split(" ");
                                try {
                                    LocalDate paymentDateParsed = LocalDate.parse(paymentDates + " 01", DateTimeFormatter.ofPattern("dd mm yyyy"));
                                    if (paymentDateParsed.isAfter(currentDate)) {
                                        if (roomRates.containsKey(currentSelectedRoomType)) {
                                            newAmount = roomRates.get(currentSelectedRoomType);
                                        }

                                        String receipt = (paymentDetails.length > 1) ? paymentDetails[1] : " ";
                                        String method = (paymentDetails.length > 2) ? paymentDetails[2] : "None";

                                        updatedUserContent.append(paymentDates).append(": ").append(newAmount).append(" ")
                                                .append(receipt).append(" ").append(method).append(" [Date]").append("\n");
                                  
                                        continue;
                                    }
                                } catch (DateTimeParseException e) {
                                    System.err.println("Invalid date format for: " + paymentDates);
                                }  
                            }  
                        }
                    } 
                }
                 if (!foundUser || !paymentLines.startsWith("Payments:")) {
                    updatedUserContent.append(paymentLines).append("\n");
                }
            }
            
            System.out.println(updatedUserContent.toString());
            
            
            BufferedWriter bw4 = new BufferedWriter(new FileWriter("userPayment.txt"));
            bw4.write(updatedUserContent.toString());
            bw4.close();
            br4.close();
            
            BufferedWriter bw = new BufferedWriter(new FileWriter("residentInfo.txt"));
            
            for(Map<String, String> user: userData){
                bw.write("residentName:" + user.get("residentName"));
                bw.newLine();
                bw.write("tpNum:" + user.get("tpNum"));
                bw.newLine();
                bw.write("password:" + user.get("password"));
                bw.newLine();
                bw.write("rePassword:" + user.get("rePassword"));
                bw.newLine();
                bw.write("contact:" + user.get("contact"));
                bw.newLine();
                bw.write("eContact:" + user.get("eContact"));
                bw.newLine();
                bw.write("email:" + user.get("email"));
                bw.newLine();
                bw.write("birth:" + user.get("birth"));
                bw.newLine();
                bw.write("address:" + user.get("address"));
                bw.newLine();
                bw.write("country:" + user.get("country"));
                bw.newLine();
                bw.write("roomType:" + user.get("roomType"));
                bw.newLine();
                bw.write("roomAssigned:" + user.get("roomAssigned"));
                bw.newLine();
                bw.write("referenceNum:" + user.get("referenceNum"));
                bw.newLine();
                bw.write("---------------------------------------------------------------");
                bw.newLine();
            }

            bw.close();
            System.out.println("User data successfully written to residentInfo.txt");
            
            BufferedWriter bw2 = new BufferedWriter(new FileWriter("availableRooms.txt"));
            
            for (Map.Entry<String, String> entry : availableRooms.entrySet()) {
                bw2.write(entry.getKey() + ": " + entry.getValue());
                bw2.newLine();
            }

            bw2.close();
            System.out.println("Available rooms successfully updated in availableRooms.txt");
            
            JOptionPane.showMessageDialog(this, "Update Successfully!");
            
        }catch(Exception e){
            e.printStackTrace(); 
            JOptionPane.showMessageDialog(this, "Error Updating, Pleaase Try Again.");
        }
        
        
    }//GEN-LAST:event_savebtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        manage_residents mr = new manage_residents(managerName, managerTPNum, managerPW, managerEmail);
        mr.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void checkbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbtnActionPerformed
        String currentRoomType = (String) residentRoomType.getSelectedItem(); 
        String currentRoomNumber = residentRoomNo != null ? residentRoomNo.getSelectedItem().toString() : "";

        List<String> validRoomTypes = Arrays.asList("single", "twins", "triple", "quad");
        if (!validRoomTypes.contains(currentRoomType.toLowerCase())) {
            JOptionPane.showMessageDialog(this, "Invalid Room Type.\nOnly 'single', 'twins', 'triple', or 'quad' for the Room Types.");
            return;
        }

        if (!currentRoomType.equals(this.roomType) || !currentRoomNumber.equals(this.roomAssigned)) {
            try (BufferedReader br = new BufferedReader(new FileReader("userPayment.txt"))) {
                String line;
                boolean hasOutstandingPayment = false;
                boolean isMatchingUser = false;
                LocalDate currentDate = LocalDate.now();
                int currentMonth = currentDate.getMonthValue();
                int currentYear = currentDate.getYear();

                while ((line = br.readLine()) != null) {
                    // Identify the user by name
                    if (line.startsWith("residentName:")) {
                        String fileResidentName = line.split(":", 2)[1].trim();
                        isMatchingUser = fileResidentName.equals(this.residentname); // Check if this block matches the resident
                        if (!isMatchingUser) {
                            continue; 
                        }
                    }

                    if (isMatchingUser && line.startsWith("Payments:")) {
                        while ((line = br.readLine()) != null && !line.startsWith("-------------------------------------------------------")) {
                            if (!line.isEmpty()) {
                                String nextline = br.readLine();
                                String[] paymentParts = nextline.split(":");
                                if (paymentParts.length > 1) {
             
                                    String paymentDate = paymentParts[0].trim(); 
                                 
                                    String[] dateParts = paymentDate.split(" ");
                                    
                                    if (dateParts.length == 2) { 
                                        String month = dateParts[0].toLowerCase(); // Month name
                                        System.out.println(month);
                                
                                        try{
                                            int paymentMonth = Month.valueOf(month.toUpperCase()).getValue(); // Convert month name to month number
                                            int paymentYear = Integer.parseInt(dateParts[1]);
                                            String[] paymentDetails = paymentParts[1].trim().split(" ");
                                            
                                            if (paymentDetails.length > 1) {
                                                String receiptInfo = paymentDetails[1].trim();
                                                System.out.println(receiptInfo);
                                                if ("[RECEIPT-]".equals(receiptInfo) || receiptInfo.contains("[None]")) {
                                                    // If the payment month is current or previous month, mark as outstanding
                                                    if ((paymentYear == currentYear && paymentMonth <= currentMonth) || 
                                                        (paymentYear < currentYear)) {
                                                        hasOutstandingPayment = true;
                                                        break;
                                                    }
                                                } else {
                                                   
                                                    if (receiptInfo.startsWith("[RECEIPT-") && receiptInfo.length() > 9) {
                                                        continue; // Skip this payment entry
                                                    }
                                                }
                                            }
                                        }catch(Exception e){

                                        }
                                    }
                                }
                            }
                        }
                        break; 
                    }
                }
                
                System.out.println("reach here");
                br.close();
                // Feedback based on payment status
                if (hasOutstandingPayment) {
                    JOptionPane.showMessageDialog(this,
                        this.residentname + " has Outstanding payment unpaid, \nRoom Type or Room Number cannot be Changed until Payment is done.");
                } else {
                    System.out.println("reach here");
                    List<String> availableRoomsInFile = new ArrayList<>();
                    try (BufferedReader br2 = new BufferedReader(new FileReader("availableRooms.txt"))) {
                        String lines;
                        while ((lines = br2.readLine()) != null) {
                            if (!lines.trim().isEmpty()) {
                                availableRoomsInFile.add(lines.trim());
                            }
                        }
                        
                        residentRoomNo.removeAllItems(); 
                        for (String room : availableRoomsInFile) {
                             if (room.contains(":")) {
                                String[] roomParts = room.split(":");
                                if (roomParts.length > 1 && !roomParts[1].trim().isEmpty()) {
                                    String value = roomParts[1].trim();
                                    String[] eachRoom = value.split(",");

                                    for (String aRoom : eachRoom) {
                                        if (!aRoom.trim().isEmpty()) { 
                                            residentRoomNo.addItem(aRoom.trim()); 
                                        }
                                    }
                                } 
                            } 
                           
                        }
                        
                        if (!availableRoomsInFile.isEmpty()) {
                            String availableRoomMessage = "Available rooms:\n" + String.join("\n", availableRoomsInFile);
                            JOptionPane.showMessageDialog(this, availableRoomMessage);
                        } else {
                            JOptionPane.showMessageDialog(this, "No available rooms found.");
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error occured, please try again.");
                    }
                }

            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error occured, please try again.");
            }
        }
        
    }//GEN-LAST:event_checkbtnActionPerformed

    private void roomNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomNumberActionPerformed

    private void residentAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_residentAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_residentAddressActionPerformed

    private void residentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_residentNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_residentNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(managerEditResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(managerEditResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(managerEditResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(managerEditResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new managerEditResident().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkbtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField residentAddress;
    private javax.swing.JTextField residentBirth;
    private javax.swing.JTextField residentContact;
    private javax.swing.JTextField residentCountry;
    private javax.swing.JTextField residentEcontact;
    private javax.swing.JTextField residentEmail;
    private javax.swing.JTextField residentName;
    private javax.swing.JTextField residentPassword;
    private javax.swing.JComboBox<String> residentRoomNo;
    private javax.swing.JComboBox<String> residentRoomType;
    private javax.swing.JTextField residentTPNum;
    private javax.swing.JTextField roomNumber;
    private javax.swing.JButton savebtn;
    // End of variables declaration//GEN-END:variables
}
