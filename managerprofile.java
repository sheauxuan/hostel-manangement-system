/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop_grp_assignment;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Map;
import java.util.HashMap;
import javax.swing.*; 
import java.awt.event.*;


/**
 *
 * @author HP
 */
public class managerprofile extends javax.swing.JFrame {
    private String managerName;
    private String tpNum;
    private String Password;
    private String email;
    private String currentPasswordInFile;
    private boolean isAuthenticated = false;
    /**
     * Creates new form managerprofile
     */
    public managerprofile(String managerName, String tpNum, String Password, String email) {
        this.managerName = managerName;
        this.tpNum = tpNum;
        this.Password = Password;
        this.email = email;
        initComponents();
        loadManagerData();
        addCustomListeners();
        addPasswordFieldListener(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        managerprofileback = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        managername = new javax.swing.JTextField();
        manageremail = new javax.swing.JTextField();
        passwordfield = new javax.swing.JPasswordField();
        tpnumfield = new javax.swing.JTextField();
        savebutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(80, 118, 135));

        jPanel2.setBackground(new java.awt.Color(56, 75, 112));

        managerprofileback.setText("BACK");
        managerprofileback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerprofilebackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(managerprofileback)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(managerprofileback)
                .addGap(15, 15, 15))
        );

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel1.setText("Name :");

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel2.setText("TPNumber :");

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel3.setText("Password :");

        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel4.setText("Email :");

        managername.setEditable(false);

        tpnumfield.setEditable(false);

        savebutton.setText("SAVE");
        savebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(managername, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(manageremail)
                    .addComponent(passwordfield)
                    .addComponent(tpnumfield))
                .addGap(130, 130, 130))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(savebutton)
                .addGap(41, 41, 41))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(managername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tpnumfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(passwordfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(manageremail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(savebutton)
                .addGap(0, 25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void managerprofilebackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerprofilebackActionPerformed
        Main_pageManager mp = new Main_pageManager(managerName, tpNum, Password, email);
        mp.setVisible(true);  
        this.dispose();
    }//GEN-LAST:event_managerprofilebackActionPerformed

    private void savebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebuttonActionPerformed
    String currentEmail = manageremail.getText().trim();
    String currentPassword = new String(passwordfield.getPassword()).trim();

    if (currentEmail.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Email cannot be empty.");
        return; 
    }

    if (currentPassword.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Password cannot be empty.");
        return; 
    }

    File file = new File("managerInfo.txt");
    if (!file.exists()) {
        JOptionPane.showMessageDialog(this, "Manager info file not found!");
        return;
    }

    StringBuilder fileContent = new StringBuilder();

    try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
        String line;
        while ((line = reader.readLine()) != null) {
            String[] keyValue = line.split(":", 2);
            if (keyValue.length == 2) {
                String key = keyValue[0].trim();
                String value = keyValue[1].trim();

                if ("email".equals(key)) {
                    // Update the email
                    fileContent.append("email:").append(currentEmail).append(System.lineSeparator());
                } else if ("password".equals(key)) {
                    if (!currentPassword.equals(value)) {
                        while (true) {
                            String oldPassword = JOptionPane.showInputDialog(this, "Enter current password to update:");
                            if (oldPassword == null) {
                                JOptionPane.showMessageDialog(this, "Password update canceled.");
                                return;
                            }
                            if (oldPassword.equals(value)) {
                                String newPassword = JOptionPane.showInputDialog(this, "Enter new password:");
                                if (newPassword == null || newPassword.trim().length() < 8) {
                                    JOptionPane.showMessageDialog(this, "Password must be at least 8 characters long.");
                                    return;
                                }
                                fileContent.append("password:").append(newPassword).append(System.lineSeparator());
                                break;
                            } else {
                                JOptionPane.showMessageDialog(this, "Incorrect password. Try again.");
                            }
                        }
                    } else {
                        fileContent.append(line).append(System.lineSeparator());
                    }
                } else {
                    fileContent.append(line).append(System.lineSeparator());
                }
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error reading manager info file: " + e.getMessage());
        return;
    }

    try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
        writer.write(fileContent.toString());

        JOptionPane.showMessageDialog(this, "Manager profile updated successfully!");
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error saving manager info file: " + e.getMessage());
    }



    }//GEN-LAST:event_savebuttonActionPerformed
    private void loadManagerData() {
    System.out.println("Looking for file: managerInfo.txt");
    File file = new File("managerInfo.txt");

    if (!file.exists()) {
        System.out.println("File not found in the current directory: " + System.getProperty("user.dir"));
        return;
    }

    try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
        String line;
        while ((line = reader.readLine()) != null) {
            line = line.trim();
            System.out.println("Read line: " + line);

            String[] keyValue = line.split(":", 2);
            if (keyValue.length == 2) {
                String key = keyValue[0].trim();
                String value = keyValue[1].trim();

                if ("managerName".equals(key)) {
                    managername.setText(value);
                } else if ("tpNum".equals(key)) {
                    tpnumfield.setText(value);
                } else if ("password".equals(key)) {
                    passwordfield.setText(value);
                    currentPasswordInFile = value; 
                } else if ("email".equals(key)) {
                    manageremail.setText(value);
                }
            }
        }
    } catch (IOException e) {
        System.out.println("Error loading manager data: " + e.getMessage());
    }
}

    
    private void saveManagerData() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("managerInfo.txt"))) {
            writer.write("managerName:" + managername.getText().trim());
            writer.newLine();
            writer.write("tpNum:" + tpnumfield.getText().trim());
            writer.newLine();
            writer.write("password:" + new String(passwordfield.getPassword()).trim());
            writer.newLine();
            writer.write("email:" + manageremail.getText().trim());
            writer.newLine();
            System.out.println("Manager data saved successfully.");
        } catch (IOException e) {
            System.out.println("Error saving manager data: " + e.getMessage());
        }
    }

private void addCustomListeners() {
    tpnumfield.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            showCannotEditMessage(evt);
        }
    });

    managername.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            showCannotEditMessage(evt);
        }
    });
}


private void showCannotEditMessage(java.awt.event.MouseEvent evt) {
    JOptionPane.showMessageDialog(this, "This field is not editable.");
}

private void addPasswordFieldListener() {
    passwordfield.setEchoChar('*');
    passwordfield.setEditable(false);

    passwordfield.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (!passwordfield.isEditable()) {
                while (true) {
                    String oldPassword = JOptionPane.showInputDialog("Please enter your current password:");

                    if (oldPassword == null) {

                        JOptionPane.showMessageDialog(null, "Operation cancelled. Editing is not allowed.");
                        return;
                    }

                    if (oldPassword.equals(currentPasswordInFile)) {
                        isAuthenticated = true; 
                        passwordfield.setEditable(true); 
                        JOptionPane.showMessageDialog(null, "You can now edit the password field.");
                        break;
                    } else {
                        JOptionPane.showMessageDialog(null, "Incorrect password. Please try again.");
                    }
                }
            }
        }
    });

    passwordfield.addFocusListener(new java.awt.event.FocusAdapter() {
        @Override
        public void focusLost(java.awt.event.FocusEvent evt) {
            if (passwordfield.isEditable() && isAuthenticated) {
                String newPassword = new String(passwordfield.getPassword()).trim();

                if (newPassword.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Password cannot be empty.");
                    passwordfield.requestFocus(); 
                    return;
                } else if (newPassword.length() < 8) {
                    JOptionPane.showMessageDialog(null, "Password must be at least 8 characters long.");
                    passwordfield.requestFocus(); 
                    return;
                }

                currentPasswordInFile = newPassword;
                saveManagerData(); 

                isAuthenticated = false;
                passwordfield.setEditable(false);
            }
        }
    });
}
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (Exception ex) {
        java.util.logging.Logger.getLogger(managerfixrate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    String managerName = "LimJay";
    String tpNum = "MNG999";
    String Password = "manager123456";
    String email = "aaa@GMAIL.COM";

    java.awt.EventQueue.invokeLater(() -> {
        new managerprofile(managerName, tpNum, Password, email).setVisible(true);
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField manageremail;
    private javax.swing.JTextField managername;
    private javax.swing.JButton managerprofileback;
    private javax.swing.JPasswordField passwordfield;
    private javax.swing.JButton savebutton;
    private javax.swing.JTextField tpnumfield;
    // End of variables declaration//GEN-END:variables
}
