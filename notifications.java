/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop_grp_assignment;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.util.LinkedList;




/**
 *
 * @author HP
 */
public class notifications extends javax.swing.JFrame {
    private String name;
    private String tpNum;
    private String pw;
    private String rePassword;
    private String email;
    private String contact;
    private String econtact;
    private String datebirth;
    private String address;
    private String country;
    private String roomType;
    private String referenceNum;
    private String roomNo;
    
    


    /**
     * Creates new form notifications
     */
    public notifications(){
        initComponents();
    }
    public notifications(String name, String tpNum, String pw, String rePassword,String email, String contact, String econtact, String datebirth, String address, String country, String roomType, String referenceNum, String roomNo) {
        this.name = name;
        this.tpNum = tpNum;
        this.pw = pw;
        this.rePassword = pw;
        this.email = email;
        this.contact = contact;
        this.econtact = econtact;
        this.datebirth = datebirth;
        this.address = address;
        this.country = country;
        this.roomType = roomType;
        this.referenceNum = referenceNum;
        this.roomNo = roomNo;
        initComponents();
         loadAndDisplayReminders("notification.txt", null);  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scroll = new javax.swing.JScrollPane();
        panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        remindertextarea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        filtercombobox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        scroll.setBackground(new java.awt.Color(80, 118, 135));
        scroll.setBorder(null);
        scroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        panel.setBackground(new java.awt.Color(56, 75, 112));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("REMINDERS");

        remindertextarea.setEditable(false);
        remindertextarea.setColumns(20);
        remindertextarea.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        remindertextarea.setRows(5);
        remindertextarea.setCaretColor(new java.awt.Color(255, 255, 255));
        remindertextarea.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane1.setViewportView(remindertextarea);

        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        filtercombobox.setBackground(new java.awt.Color(204, 204, 204));
        filtercombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "ANNOUNCEMENTS", "REMINDERS" }));
        filtercombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtercomboboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(filtercombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filtercombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        scroll.setViewportView(panel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        usermain_page up = new usermain_page(name, tpNum, pw, rePassword, contact, econtact, email, datebirth, address, country, roomType, referenceNum, roomNo);
        up.setVisible(true);  
        this.dispose();  
                
    }//GEN-LAST:event_jButton1ActionPerformed

    private void filtercomboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtercomboboxActionPerformed
        String selectedFilter = (String) filtercombobox.getSelectedItem();

        if (selectedFilter.equals("ANNOUNCEMENTS")) {
            loadAndDisplayReminders("notification.txt", "All Students");
        } else if (selectedFilter.equals("REMINDERS")) {
            loadAndDisplayReminders("notification.txt", "TP Number");
        } else {
            loadAndDisplayReminders("notification.txt", null);
        }
    

    }//GEN-LAST:event_filtercomboboxActionPerformed

    private void loadAndDisplayReminders(String filepath, String filter) {
    
    try (BufferedReader br = new BufferedReader(new FileReader(filepath))) {
        String line;
        StringBuilder currentReminder = new StringBuilder();
        LinkedList<String> reminderList = new LinkedList<>();
        boolean addReminder = false;
        boolean hasAllStudents = false;
        boolean hasTpNumber = false;

        while ((line = br.readLine()) != null) {
            line = line.trim();
            System.out.println("Processing line: " + line);

            if (line.startsWith("Reminder:")) {
                System.out.println("Found Reminder: " + line);
                if (addReminder && currentReminder.length() > 0) {
                    reminderList.addFirst(currentReminder.toString());
                }
                currentReminder.setLength(0);  
                addReminder = false;
                currentReminder.append("\n").append(line).append("\n");

                hasAllStudents = false;
                hasTpNumber = false;
            }

            else if (line.startsWith("Target:")) {
                System.out.println("Found Target: " + line);

                if (line.contains("All Residents")) {
                    hasAllStudents = true;
                }

                if (line.contains(tpNum)) {
                    hasTpNumber = true;
                }

                if (filter == null) { 
                        if (hasAllStudents || hasTpNumber || line.contains("All Residents")) {
                            addReminder = true;
                        }
                } else if (filter.equals("All Students")) {
                    if (hasAllStudents && !hasTpNumber) { 
                        addReminder = true;
                    }
                } else if (filter.equals("TP Number")) {
                    if (hasTpNumber && !hasAllStudents) { 
                        addReminder = true;
                    }
                }
            }

            else if (addReminder) {
                currentReminder.append(line).append("\n");
            }
        }

        if (addReminder && currentReminder.length() > 0) {
            reminderList.addFirst(currentReminder.toString());
        }

        StringBuilder displayedReminders = new StringBuilder();
        for (String reminder : reminderList) {
            displayedReminders.append(reminder).append("\n");
        }

        if (remindertextarea != null) {
            remindertextarea.setText(displayedReminders.toString().trim());
            System.out.println("Displaying reminders in remindertextarea");
        } else {
            System.out.println("remindertextarea is null");
        }
    } catch (IOException e) {
        System.out.println("Error loading reminders: " + e.getMessage());
        JOptionPane.showMessageDialog(this, "Error loading reminders: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    }
}



    public static void main(String args[]) {
    // The data will be loaded from the file, no need to pass anything
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new notifications().setVisible(true);
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> filtercombobox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel;
    private javax.swing.JTextArea remindertextarea;
    private javax.swing.JScrollPane scroll;
    // End of variables declaration//GEN-END:variables
}
