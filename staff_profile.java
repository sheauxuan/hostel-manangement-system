/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop_grp_assignment;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class staff_profile extends javax.swing.JFrame {
    private String staffName;
    private String tpNum;
    private String Password;
    private String email;
    private String contact;
    private String currentPasswordInFile;
    
    private boolean isAuthenticated = false;
    
    public staff_profile() {
        initComponents();
    }
    
    public staff_profile(String staffName, String tpNum, String Password, String email, String contact) {
        initComponents();
        this.staffName = staffName;
        this.tpNum = tpNum;
        this.Password = Password;
        this.email = email;
        this.contact = contact;

        adminname.setText(this.staffName);
        tpnumfield.setText(this.tpNum);
        passwordfield.setText(this.Password);
        adminEmail.setText(this.email);
        admincontact.setText(this.contact);
        currentPasswordInFile = this.Password;
        loadAdminData();
        addPasswordFieldListener(); 
        addCustomListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        sp_backbtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        adminname = new javax.swing.JTextField();
        adminEmail = new javax.swing.JTextField();
        passwordfield = new javax.swing.JPasswordField();
        tpnumfield = new javax.swing.JTextField();
        savebutton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        admincontact = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(80, 118, 135));

        jPanel2.setBackground(new java.awt.Color(56, 75, 112));

        sp_backbtn.setText("BACK");
        sp_backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sp_backbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(sp_backbtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(sp_backbtn)
                .addGap(15, 15, 15))
        );

        jLabel1.setText("Name :");

        jLabel2.setText("TPNumber :");

        jLabel3.setText("Password :");

        jLabel4.setText("Email :");

        adminname.setEditable(false);

        tpnumfield.setEditable(false);

        savebutton.setText("SAVE");
        savebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebuttonActionPerformed(evt);
            }
        });

        jLabel5.setText("Contact:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(admincontact, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                        .addGap(131, 131, 131))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(adminname)
                            .addComponent(adminEmail)
                            .addComponent(passwordfield)
                            .addComponent(tpnumfield))
                        .addGap(130, 130, 130))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(savebutton)
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(adminname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tpnumfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(passwordfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(adminEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(admincontact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(savebutton)
                .addGap(0, 21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void sp_backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sp_backbtnActionPerformed
        Main_pageStaff mp = new Main_pageStaff(staffName, tpNum, Password, email, contact);
        mp.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_sp_backbtnActionPerformed

    private void savebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebuttonActionPerformed
        String currentTpNum = tpnumfield.getText().trim();
        String currentEmail = adminEmail.getText().trim();
        String currentPassword = new String(passwordfield.getPassword()).trim();
        String currentContact = admincontact.getText().trim();

        // Load the existing data from the file
        File file = new File("txtStaffInfo.txt");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "Admin info file not found!");
            return;
        }

        StringBuilder fileContent = new StringBuilder();
        boolean userFound = false;


        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;

            StringBuilder currentAdminData = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                line = line.trim(); // Trim each line

                // Split key-value pairs
                if (line.equals("-----------------------")) {
                    if (userFound) {
                        // Save the updated admin data block
                        fileContent.append(currentAdminData.toString());
                    } else {
                        // If not updating this admin, append the original block
                        fileContent.append(currentAdminData.toString());
                    }
                    
                    fileContent.append("-----------------------").append(System.lineSeparator());
                    // Reset the block for the next admin
                    currentAdminData.setLength(0);
                    userFound = false;
                } else {
                    // Process the current line for key-value pairs
                    String[] keyValue = line.split(":", 2);
                    if (keyValue.length == 2) {
                        String key = keyValue[0].trim();
                        String value = keyValue[1].trim();

                        if ("tpNum".equals(key) && value.equals(currentTpNum)) {
                            // If we match the tpNum, we start the update process
                            userFound = true;
                        }

                        if (userFound) {
                            // If this is the correct user, update values
                            if ("email".equals(key)) {
                                currentAdminData.append("email:").append(currentEmail).append(System.lineSeparator());
                            } else if ("password".equals(key)) {
                                // Update password
                                currentAdminData.append("password:").append(currentPassword).append(System.lineSeparator());
                                // Always update rePassword to the new password
                                currentAdminData.append("rePassword:").append(currentPassword).append(System.lineSeparator());
                            } else if ("rePassword".equals(key)) {
                                // Skip this block because rePassword is already handled with password
                                continue;
                            }else if("contact".equals(key)){
                                currentAdminData.append("contact:").append(currentContact).append(System.lineSeparator());
                            } else {
                                currentAdminData.append(key).append(":").append(value).append(System.lineSeparator());
                            }
                        } else {
                            // For other admins, just keep the original data
                            currentAdminData.append(line).append(System.lineSeparator());
                            
                        }
                    }
                }
            }

            // If the last admin data block is still in progress, save it
            if (currentAdminData.length() > 0) {
                fileContent.append(currentAdminData.toString());
                fileContent.append("-----------------------").append(System.lineSeparator());
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading admin info file: " + e.getMessage());
            return;
        }

        // Write the updated content back to the file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(fileContent.toString());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving admin info file: " + e.getMessage());
        }

        JOptionPane.showMessageDialog(this, "Admin data updated successfully!");


    }//GEN-LAST:event_savebuttonActionPerformed
    
    private void loadAdminData() {
        System.out.println("Looking for file: txtAdminInfo.txt");
        File file = new File("txtStaffInfo.txt");

        if (!file.exists()) {
            System.out.println("File not found in the current directory: " + System.getProperty("user.dir"));
            return;
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            boolean userFound = false;
            while ((line = reader.readLine()) != null) {
                line = line.trim();

                if (line.equals("-----------------------")) {
                    if (userFound) {
                        break;
                    }
                    continue; 
                }
                
                String[] keyValue = line.split(":", 2);
                if (keyValue.length == 2) {
                    String key = keyValue[0].trim();
                    String value = keyValue[1].trim();

                    if ("tpNum".equals(key)) {
                    // Check if the tpNum matches the user’s input
                        if (value.equals(tpnumfield.getText().trim())) {
                            userFound = true; // If the tpNum matches, it's the correct admin
                            System.out.println("Found admin with tpNum: " + value);
                        } else {
                            userFound = false; // Reset if tpNum doesn't match
                        }
                    }

                // If we've found the correct admin, update the fields
                    if (userFound) {
                        if ("adminName".equals(key)) {
                            adminname.setText(value);
                        } else if ("tpNum".equals(key)) {
                            tpnumfield.setText(value);
                        } else if ("password".equals(key)) {
                            passwordfield.setText(value);
                            currentPasswordInFile = value; // Store the password here
                        } else if ("email".equals(key)) {
                            adminEmail.setText(value);
                        }
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("Error loading manager data: " + e.getMessage());
        }
    }

    
    private void saveAdminData() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("managerInfo.txt"))) {
            writer.write("adminName:" + adminname.getText().trim());
            writer.newLine();
            writer.write("tpNum:" + tpnumfield.getText().trim());
            writer.newLine();
            writer.write("password:" + new String(passwordfield.getPassword()).trim());
            writer.newLine();
            writer.write("email:" + adminEmail.getText().trim());
            writer.newLine();
            System.out.println("Admin data saved successfully.");
        } catch (IOException e) {
            System.out.println("Error saving manager data: " + e.getMessage());
        }
    }

    // Add Listener to Handle Password Changes
    // Add custom listeners for non-editable fields in the manager profile
    private void addCustomListeners() {
        tpnumfield.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showCannotEditMessage(evt);
            }
        });

        adminname.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showCannotEditMessage(evt);
            }
        });
}

// Show a message when attempting to edit non-editable fields
    private void showCannotEditMessage(java.awt.event.MouseEvent evt) {
        JOptionPane.showMessageDialog(this, "This field is not editable.");
    }

// Listener to handle password editing with authentication
    private void addPasswordFieldListener() {
    passwordfield.setEchoChar('*');
    passwordfield.setEditable(false);

    // Add mouse listener to trigger password authentication
    passwordfield.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (!passwordfield.isEditable()) {
                while (true) {
                    String oldPassword = JOptionPane.showInputDialog("Please enter your current password:");

                    if (oldPassword == null) {
                        // User canceled the operation
                        JOptionPane.showMessageDialog(null, "Operation cancelled. Editing is not allowed.");
                        return;
                    }

                    // Replace "currentPasswordInFile" with the password loaded from the file
                    if (oldPassword.equals(currentPasswordInFile)) {
                        isAuthenticated = true; // Mark as authenticated
                        passwordfield.setEditable(true); // Allow editing
                        JOptionPane.showMessageDialog(null, "You can now edit the password field.");
                        break;
                    } else {
                        JOptionPane.showMessageDialog(null, "Incorrect password. Please try again.");
                    }
                }
            }
        }
    });

    // Add focus listener to handle password validation on focus loss
    passwordfield.addFocusListener(new java.awt.event.FocusAdapter() {
        @Override
        public void focusLost(java.awt.event.FocusEvent evt) {
            if (passwordfield.isEditable() && isAuthenticated) {
                String newPassword = new String(passwordfield.getPassword()).trim();

                // Validate the new password
                if (newPassword.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Password cannot be empty.");
                    passwordfield.requestFocus(); // Refocus the field
                    return;
                } else if (newPassword.length() < 8) {
                    JOptionPane.showMessageDialog(null, "Password must be at least 8 characters long.");
                    passwordfield.requestFocus(); // Refocus the field
                    return;
                }

                // Save the new password to the file
                currentPasswordInFile = newPassword;
                saveAdminData(); // Call the method to save updated data

                

                // Reset the field state
                isAuthenticated = false;
                passwordfield.setEditable(false);
            }
        }
    });
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(staff_profile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(staff_profile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(staff_profile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(staff_profile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new staff_profile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField adminEmail;
    private javax.swing.JTextField admincontact;
    private javax.swing.JTextField adminname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField passwordfield;
    private javax.swing.JButton savebutton;
    private javax.swing.JButton sp_backbtn;
    private javax.swing.JTextField tpnumfield;
    // End of variables declaration//GEN-END:variables
}
