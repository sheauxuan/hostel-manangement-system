/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop_grp_assignment;
import javax.swing.*;                 // For Swing components like JTable, JScrollPane, JOptionPane
import javax.swing.table.DefaultTableModel; // For table data model
import java.awt.*;                    // For layout managers like BorderLayout
import java.io.*;  
import java.util.List;
import java.util.ArrayList;
/**
 *
 * @author HP
 */
public class manage_staff extends javax.swing.JFrame {
    private String managerName;
    private String tpNum;
    private String Password;
    private String email;
    
    /**
     * Creates new form manage_admin
     */
    public manage_staff(String managerName, String tpNum, String Password, String email) {
        this.managerName = managerName;
        this.tpNum = tpNum;
        this.Password = Password;
        this.email = email;
        initComponents();
        loadAdminInfoTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fixratetable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        adminInfoBACK = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        adminInfoTable = new javax.swing.JTable();
        deleteadminbutton = new javax.swing.JButton();
        updatebutton = new javax.swing.JButton();
        addstaffbutton = new javax.swing.JButton();

        fixratetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Single", null},
                {"Twins", null},
                {"Triple", null},
                {"Quad", null}
            },
            new String [] {
                "Room Type", "Room Rate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(fixratetable);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(80, 118, 135));

        jPanel2.setBackground(new java.awt.Color(56, 75, 112));

        adminInfoBACK.setText("BACK");
        adminInfoBACK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminInfoBACKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(adminInfoBACK)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(adminInfoBACK)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        adminInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "StaffName", "TPNum", "Password", "Contact", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(adminInfoTable);

        deleteadminbutton.setText("DELETE USER");
        deleteadminbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteadminbuttonActionPerformed(evt);
            }
        });

        updatebutton.setText("UPDATE INFO");
        updatebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebuttonActionPerformed(evt);
            }
        });

        addstaffbutton.setText("ADD STAFF");
        addstaffbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addstaffbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteadminbutton)
                .addGap(85, 85, 85)
                .addComponent(updatebutton)
                .addGap(141, 141, 141))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addstaffbutton)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(addstaffbutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updatebutton)
                    .addComponent(deleteadminbutton))
                .addGap(0, 140, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void loadAdminInfoTable() {
    File file = new File("txtStaffInfo.txt");

    if (!file.exists()) {
        JOptionPane.showMessageDialog(this, "Admin info file not found!");
        return;
    }

    String[] columnNames = {"StaffName", "TPNum", "Password", "Contact", "Email"};
    DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);

    try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
        String line;
        String staffName = "", tpNum = "", password = "", contact = "", email = "";

        while ((line = reader.readLine()) != null) {
            line = line.trim();

            if (line.isEmpty() || line.equals("-----------------------")) {
                // Add the collected data to the table model
                if (!staffName.isEmpty() && !tpNum.isEmpty()) {
                    tableModel.addRow(new Object[]{staffName, tpNum, password, contact, email});
                }
                // Reset variables for the next admin record
                staffName = tpNum = password = contact = email = "";
                continue;
            }

            String[] keyValue = line.split(":", 2);
            if (keyValue.length == 2) {
                String key = keyValue[0].trim();
                String value = keyValue[1].trim();

                switch (key) {
                    case "staffName":
                        staffName = value;
                        break;
                    case "tpNum":
                        tpNum = value;
                        break;
                    case "password":
                        password = value;
                        break;
                    case "contact":
                        contact = value;
                        break;
                    case "email":
                        email = value;
                        break;
                    // Skip rePassword
                }
            }
        }

        if (!staffName.isEmpty() && !tpNum.isEmpty()) {
            tableModel.addRow(new Object[]{staffName, tpNum, password, contact, email});
        }

    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error reading admin info file: " + e.getMessage());
    }

    adminInfoTable.setModel(tableModel);
}

    private void adminInfoBACKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminInfoBACKActionPerformed
        update_stafforresidents ur = new update_stafforresidents(managerName, tpNum, Password, email);
        ur.setVisible(true);
        this.dispose(); 
    }//GEN-LAST:event_adminInfoBACKActionPerformed

    private void updatebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebuttonActionPerformed
        int confirmation = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to save all changes?", 
        "Confirm Update", JOptionPane.YES_NO_OPTION);

    if (confirmation == JOptionPane.YES_OPTION) {
        try {
            DefaultTableModel tableModel = (DefaultTableModel) adminInfoTable.getModel();
            int rowCount = tableModel.getRowCount();

            List<String> updatedData = new ArrayList<>();

            for (int i = 0; i < rowCount; i++) {
                String staffName = tableModel.getValueAt(i, 0).toString().trim();
                String tpNum = tableModel.getValueAt(i, 1).toString().trim();
                String password = tableModel.getValueAt(i, 2).toString().trim();
                String contact = tableModel.getValueAt(i, 3).toString().trim();
                String email = tableModel.getValueAt(i, 4).toString().trim();

                if (staffName.isEmpty() || tpNum.isEmpty() || password.isEmpty() || contact.isEmpty() || email.isEmpty()) {
                    JOptionPane.showMessageDialog(this, 
                        "All fields must be filled. Please check row " + (i + 1) + ".", 
                        "Empty Field", 
                        JOptionPane.ERROR_MESSAGE);
                    return; 
                }

                if (password.length() < 8) {
                    JOptionPane.showMessageDialog(this, 
                        "Password for Staff '" + staffName + "' should be 8 or more characters long. Please correct it.",
                        "Invalid Password Length", 
                        JOptionPane.ERROR_MESSAGE);
                    return; 
                }


                String rePassword = password;

                // Format the data for the file
                updatedData.add("staffName:" + staffName);
                updatedData.add("tpNum:" + tpNum);
                updatedData.add("password:" + password);
                updatedData.add("rePassword:" + rePassword);
                updatedData.add("contact:" + contact);
                updatedData.add("email:" + email);
                updatedData.add("-----------------------");
            }

            File file = new File("txtStaffInfo.txt");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                for (String line : updatedData) {
                    writer.write(line);
                    writer.newLine();
                }
            }

            JOptionPane.showMessageDialog(this, "All changes have been saved successfully.");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error saving changes to the file: " + ex.getMessage());
            ex.printStackTrace();
        }
    } else {
        JOptionPane.showMessageDialog(this, "Update canceled.");
    }




    }//GEN-LAST:event_updatebuttonActionPerformed
    
    private boolean updateAdminInfoInFile(String fileName, String tpNum, String adminName, String password, String rePassword, String contact, String email) throws IOException {
    File file = new File(fileName);
    if (!file.exists()) {
        throw new FileNotFoundException("The file " + fileName + " does not exist.");
    }

    List<String> lines = new ArrayList<>();
    boolean found = false;
    boolean isUpdating = false;  

    try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
        String line;

        while ((line = reader.readLine()) != null) {
            line = line.trim();

            if (isUpdating) {
                if (line.equals("-----------------------")) {
                    isUpdating = false;
                    lines.add("tpNum:" + tpNum);
                    lines.add("staffName:" + adminName);
                    lines.add("password:" + password);
                    lines.add("rePassword:" + rePassword);
                    lines.add("contact:" + contact);
                    lines.add("email:" + email);
                    lines.add("-----------------------");
                    
                    continue;  
                }
                continue;  
            }

            if (line.startsWith("tpNum:") && line.split(":")[1].trim().equals(tpNum)) {
                found = true;
                isUpdating = true;  
                continue;  
            }

            lines.add(line);
        }
    }

    if (found) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            for (String data : lines) {
                writer.write(data + "\n");
            }
        }
        return true;  
    }

    return false;  
}
    
    private void deleteadminbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteadminbuttonActionPerformed
        int selectedRow = adminInfoTable.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an staff to delete.");
        return;
    }

    String tpNumber = adminInfoTable.getValueAt(selectedRow, 1).toString().trim(); 

    int confirmation = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete the admin with TP Number " + tpNumber + "?",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION
    );

    if (confirmation == JOptionPane.YES_OPTION) {
        try {
            boolean deleted = deleteAdminByTpNumber("txtStaffInfo.txt", tpNumber);

            if (deleted) {
                ((DefaultTableModel) adminInfoTable.getModel()).removeRow(selectedRow);
                JOptionPane.showMessageDialog(this, "Staff with TP Number " + tpNumber + " deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Error occurred during deletion.");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error processing the file: " + ex.getMessage());
            ex.printStackTrace();
        }
    } else {
        JOptionPane.showMessageDialog(this, "Deletion canceled.");
    }



    }//GEN-LAST:event_deleteadminbuttonActionPerformed

    private void addstaffbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addstaffbuttonActionPerformed
        staffregistration ar = new staffregistration(managerName, tpNum, Password, email);
        ar.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_addstaffbuttonActionPerformed
    
    private boolean deleteAdminByTpNumber(String fileName, String tpNumber) throws IOException {
    File file = new File(fileName);
    if (!file.exists()) {
        throw new FileNotFoundException("The file " + fileName + " does not exist.");
    }

    List<String> lines = new ArrayList<>();
    boolean found = false;
    boolean isDeleting = false; 
    String lastLine = null; 

    try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
        String line;

        while ((line = reader.readLine()) != null) {
            System.out.println("Processing line: " + line);

            if (isDeleting) {
                if (line.equals("-----------------------")) {
                    isDeleting = false;
                    System.out.println("Found separator, stopping deletion.");
                }
                continue; 
            }

            if (line.startsWith("tpNum:") && line.split(":")[1].trim().equals(tpNumber)) {
                System.out.println("Found matching TP number: " + tpNumber);
                found = true;
                isDeleting = true;

                if (lastLine != null && lastLine.startsWith("staffName:")) {
                    lines.remove(lines.size() - 1);
                    System.out.println("Removed previous adminName line: " + lastLine);
                }
                continue; 
            }

            if (!isDeleting && !line.trim().isEmpty()) {
                lines.add(line);
            }

            lastLine = line; 
        }
    }

    if (found) {
        System.out.println("Staff found and marked for deletion, rewriting file...");

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            for (String data : lines) {
                if (!data.trim().isEmpty()) { 
                    System.out.println("Writing back line: " + data);
                    writer.write(data);
                    writer.newLine(); 
                }
            }
        }
        return true;
    }

    System.out.println("Staff not found!");
    return false;
}




private boolean checkAdminExists(String fileName, String tpNumber) throws IOException {
    try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.startsWith("tpNum:") && line.split(":")[1].trim().equals(tpNumber)) {
                return true; // Found a match
            }
        }
    }
    return false; 
}

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (Exception ex) {
        java.util.logging.Logger.getLogger(managerfixrate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    String managerName = "LimJay";
    String tpNum = "MNG999";
    String Password = "manager123456";
    String email = "aaa@GMAIL.COM";

    java.awt.EventQueue.invokeLater(() -> {
        new manage_staff(managerName, tpNum, Password, email).setVisible(true);
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addstaffbutton;
    private javax.swing.JButton adminInfoBACK;
    private javax.swing.JTable adminInfoTable;
    private javax.swing.JButton deleteadminbutton;
    private javax.swing.JTable fixratetable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton updatebutton;
    // End of variables declaration//GEN-END:variables
}
