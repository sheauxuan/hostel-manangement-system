/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop_grp_assignment;
import javax.swing.*;
import java.io.*;
import java.util.*;
import java.io.FileReader;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusAdapter;
import java.util.Map;
import java.util.HashMap;
/**
 *
 * @author HP
 */
public class user_profile extends javax.swing.JFrame {
    private String name;
    private String tpNum;
    private String pw;
    private String rePassword;
    private String email;
    private String contact;
    private String econtact;
    private String datebirth;
    private String address;
    private String country;
    private String roomType;
    private String referenceNum;
    private String roomNo;
    private List<Map<String, String>> profiles;
    private boolean passwordUpdated = false;



    
    
    /**
     * Creates new form user_profile
     */
    public user_profile(){
        initComponents();
    }
    public user_profile(String name, String tpNum, String pw, String rePassword,String email, String contact, String econtact, String datebirth, String address, String country, String roomType, String referenceNum, String roomNo) {
        initComponents();   
        profiles = new ArrayList<>();
        addCustomListeners();
        addPasswordFieldListener();
        System.out.println(name+tpNum+pw+email+contact+econtact+country+address); //debug
        this.profiles = new ArrayList<>();
        loadProfiles();
        this.name = name;
        this.tpNum = tpNum;
        this.pw = pw;
        this.rePassword = pw;
        this.email = email;
        this.contact = contact;
        this.econtact = econtact;
        this.datebirth = datebirth;
        this.address = address;
        this.country = country;
        this.roomType = roomType;
        this.referenceNum = referenceNum;
        this.roomNo = roomNo;
        
        
        
        Nametxt.setText(name);
        TPNumtxt.setText(tpNum);
        pwtxt.setText(pw); 
        pwtxt.setEchoChar('*'); 
        emailtxt.setText(email);
        contactnumtxt.setText(contact);
        econtacttxt.setText(econtact);
        countrytxt.setText(country);
        addresstxt.setText(address);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        userprofileback = new javax.swing.JButton();
        Nametxt = new javax.swing.JTextField();
        TPNumtxt = new javax.swing.JTextField();
        emailtxt = new javax.swing.JTextField();
        contactnumtxt = new javax.swing.JTextField();
        econtacttxt = new javax.swing.JTextField();
        countrytxt = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        addresstxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        pwtxt = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(80, 118, 135));

        jPanel2.setBackground(new java.awt.Color(56, 75, 112));

        userprofileback.setText("BACK");
        userprofileback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userprofilebackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(userprofileback)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(userprofileback)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        Nametxt.setEditable(false);

        TPNumtxt.setEditable(false);

        contactnumtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactnumtxtActionPerformed(evt);
            }
        });

        save.setText("SAVE");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        addresstxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addresstxtActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel1.setText("Name :");

        pwtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwtxtActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel2.setText("TPNumber :");

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel3.setText("Password :");

        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel4.setText("Email :");

        jLabel5.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel5.setText("Contact Number :");

        jLabel6.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel6.setText("Emergency Contact :");

        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel7.setText("Country :");

        jLabel8.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel8.setText("Address :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(emailtxt, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                    .addComponent(Nametxt)
                    .addComponent(TPNumtxt)
                    .addComponent(contactnumtxt)
                    .addComponent(econtacttxt)
                    .addComponent(countrytxt)
                    .addComponent(addresstxt)
                    .addComponent(pwtxt))
                .addContainerGap(237, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(save)
                .addGap(101, 101, 101))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Nametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TPNumtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pwtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactnumtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(econtacttxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(countrytxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addresstxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(26, 26, 26)
                .addComponent(save)
                .addGap(86, 86, 86))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void contactnumtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactnumtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactnumtxtActionPerformed
    private void loadProfiles() {
    System.out.println("Looking for file: residentInfo.txt");
    File file = new File("residentInfo.txt");

    if (!file.exists()) {
        System.out.println("File not found in the current directory: " + System.getProperty("user.dir"));
        return;
    }

    try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
        String line;
        List<String> currentProfile = new ArrayList<>();

        while ((line = reader.readLine()) != null) {
            line = line.trim();
            System.out.println("Read line: " + line);  


            if (line.isEmpty() || line.startsWith("----")) {
                if (!currentProfile.isEmpty()) {
                    Map<String, String> profileInfo = new HashMap<>();
                    for (String data : currentProfile) {
                        String[] keyValue = data.split(":", 2);
                        if (keyValue.length == 2) {
                            profileInfo.put(keyValue[0].trim(), keyValue[1].trim());
                        }
                    }
                    profiles.add(profileInfo);
                    currentProfile.clear();
                    System.out.println("Profile added: " + profileInfo); 
                }
            } else {
                currentProfile.add(line);  
            }
        }

        if (!currentProfile.isEmpty()) {
            Map<String, String> profileInfo = new HashMap<>();
            for (String data : currentProfile) {
                String[] keyValue = data.split(":", 2);
                if (keyValue.length == 2) {
                    profileInfo.put(keyValue[0].trim(), keyValue[1].trim());
                }
            }
            profiles.add(profileInfo);
            System.out.println("Profile added: " + profileInfo);  
        }

        if (profiles.isEmpty()) {
            System.out.println("No profiles loaded.");
        } else {
            System.out.println("Loaded profiles:");
            for (Map<String, String> profile : profiles) {
                System.out.println(profile); 
            }
        }
    } catch (IOException e) {
        System.out.println("Error loading profiles: " + e.getMessage());
    }
}
    
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed

    String tpNumber = TPNumtxt.getText().trim();
    boolean profileUpdated = false;
    boolean passwordUpdated = false;
    boolean otherFieldsUpdated = false;

    for (int i = 0; i < profiles.size(); i++) {
        Map<String, String> profileInfo = profiles.get(i);

        if (tpNumber.equalsIgnoreCase(profileInfo.get("tpNum"))) {
            profileUpdated = true;

            String newPassword = pwtxt.getText().trim();
            if (!newPassword.isEmpty() && !newPassword.equals(profileInfo.get("password"))) {
                if (newPassword.length() < 8) {
                    JOptionPane.showMessageDialog(null, "Password must be at least 8 characters long.");
                    return; 
                }
                profileInfo.put("password", newPassword);
                profileInfo.put("rePassword", newPassword);
                passwordUpdated = true;
            } else if (newPassword.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Password cannot be empty.");
                return; 
            }

            if (emailtxt.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Email cannot be empty.");
                return; 
            } else {
                profileInfo.put("email", emailtxt.getText().trim());
                otherFieldsUpdated = true;
            }

            if (contactnumtxt.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Contact number cannot be empty.");
                return; 
            } else {
                profileInfo.put("contact", contactnumtxt.getText().trim());
                otherFieldsUpdated = true;
            }

            if (econtacttxt.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Emergency contact cannot be empty.");
                return; 
            } else {
                profileInfo.put("eContact", econtacttxt.getText().trim());
                otherFieldsUpdated = true;
            }

            if (addresstxt.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Address cannot be empty.");
                return; 
            } else {
                profileInfo.put("address", addresstxt.getText().trim());
                otherFieldsUpdated = true;
            }

            if (countrytxt.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Country cannot be empty.");
                return; 
            } else {
                profileInfo.put("country", countrytxt.getText().trim());
                otherFieldsUpdated = true;
            }

            profiles.set(i, profileInfo); 
            break;
        }
    }

    if (profileUpdated) {
        saveProfiles("residentInfo.txt", profiles);

        if (passwordUpdated && otherFieldsUpdated) {
            JOptionPane.showMessageDialog(null, "Profile updated successfully!");
        } else if (passwordUpdated) {
            JOptionPane.showMessageDialog(null, "Password updated successfully.");
        } else if (otherFieldsUpdated) {
            JOptionPane.showMessageDialog(null, "Profile updated successfully!");
        }
    } else {
        JOptionPane.showMessageDialog(null, "Profile not found. Update failed.");
    }




    }//GEN-LAST:event_saveActionPerformed

    private void addresstxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addresstxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addresstxtActionPerformed

    private void pwtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwtxtActionPerformed

    private void userprofilebackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userprofilebackActionPerformed
        String name = Nametxt.getText().trim();
        String tpNum = TPNumtxt.getText().trim();
        String pw = pwtxt.getText().trim();
        String rePassword = "";  
        String contact = contactnumtxt.getText().trim();
        String eContact = econtacttxt.getText().trim();
        String email = emailtxt.getText().trim();
        String dateBirth = "";
        String address = addresstxt.getText().trim();
        String country = countrytxt.getText().trim();
        String roomType = this.roomType;
        String referenceNum = "";  
        String roomNo = this.roomNo;  

    usermain_page up = new usermain_page(name, tpNum, pw, rePassword, contact, eContact, email, dateBirth, address, country, roomType, referenceNum, roomNo);
    up.setVisible(true);  
    this.dispose();  
    }//GEN-LAST:event_userprofilebackActionPerformed
    
    public static void saveProfiles(String filename, List<Map<String, String>> profiles) {
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
        for (Map<String, String> profileInfo : profiles) {
            writer.write("residentName:" + profileInfo.get("residentName"));
            writer.newLine();
            writer.write("tpNum:" + profileInfo.get("tpNum"));
            writer.newLine();
            writer.write("password:" + profileInfo.get("password"));
            writer.newLine();
            writer.write("rePassword:" + profileInfo.get("rePassword"));
            writer.newLine();
            writer.write("contact:" + profileInfo.get("contact"));
            writer.newLine();
            writer.write("eContact:" + profileInfo.get("eContact"));
            writer.newLine();
            writer.write("email:" + profileInfo.get("email"));
            writer.newLine();
            writer.write("birth:" + profileInfo.get("birth"));
            writer.newLine();
            writer.write("address:" + profileInfo.get("address"));
            writer.newLine();
            writer.write("country:" + profileInfo.get("country"));
            writer.newLine();
            writer.write("roomType:" + profileInfo.get("roomType"));
            writer.newLine();
            writer.write("roomAssigned:" + profileInfo.get("roomAssigned"));
            writer.newLine();
            writer.write("referenceNum:" + profileInfo.get("referenceNum"));
            writer.newLine();
            writer.write("---------------------------------------------------------------");
            writer.newLine(); // Add a blank line for separation
        }
        System.out.println("Profiles saved successfully.");
    } catch (IOException e) {
        System.out.println("Error saving file: " + e.getMessage());
    }

}
    
    private void addCustomListeners() {
        TPNumtxt.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            showCannotEditMessage(evt);
        }
    });
        
        countrytxt.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            showCannotEditMessage(evt);
        }
    });

        Nametxt.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            showCannotEditMessage(evt);
        }
    });
}
    
    private void showCannotEditMessage(java.awt.event.MouseEvent evt) {
        javax.swing.JOptionPane.showMessageDialog(this, "This field is not editable.");
}
    

private boolean isAuthenticated = false; 

private void addPasswordFieldListener() {
    pwtxt.setEchoChar('*');
    pwtxt.setEditable(false); 

    pwtxt.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            if (!pwtxt.isEditable()) {
                while (true) {
                    String oldPassword = JOptionPane.showInputDialog("Please enter your current password:");

                    if (oldPassword == null) {
                        JOptionPane.showMessageDialog(null, "Operation cancelled. Editing is not allowed.");
                        return; 
                    }

                    if (oldPassword.equals(pw)) {
                        isAuthenticated = true; 
                        pwtxt.setEditable(true); 
                        JOptionPane.showMessageDialog(null, "You can now edit the password field.");
                        break; 
                    } else {
                        JOptionPane.showMessageDialog(null, "Incorrect password. Please try again.");
                    }
                }
            }
        }
    });

    pwtxt.addFocusListener(new FocusAdapter() {
    @Override
    public void focusLost(FocusEvent e) {
        if (pwtxt.isEditable() && isAuthenticated) {
            pwtxt.setEditable(false); 

            String newPassword = new String(pwtxt.getPassword()).trim();

            if (newPassword.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Password cannot be empty.");
                pwtxt.requestFocus(); 
                return;
            } else if (newPassword.length() < 8) {
                JOptionPane.showMessageDialog(null, "Password must be at least 8 characters long.");
                pwtxt.requestFocus(); 
                return;
            }

            boolean passwordUpdated = false;
            for (int i = 0; i < profiles.size(); i++) {
                Map<String, String> profileInfo = profiles.get(i);

                if (profileInfo.get("tpNum").equalsIgnoreCase(TPNumtxt.getText().trim())) {
                    profileInfo.put("password", newPassword); 
                    profileInfo.put("rePassword", newPassword); 
                    profiles.set(i, profileInfo); 
                    passwordUpdated = true;
                    break;
                }
            }

            if (passwordUpdated) {
                isAuthenticated = false; 
            }
        }
    }
});
}
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(user_profile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Nametxt;
    private javax.swing.JTextField TPNumtxt;
    private javax.swing.JTextField addresstxt;
    private javax.swing.JTextField contactnumtxt;
    private javax.swing.JTextField countrytxt;
    private javax.swing.JTextField econtacttxt;
    private javax.swing.JTextField emailtxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField pwtxt;
    private javax.swing.JButton save;
    private javax.swing.JButton userprofileback;
    // End of variables declaration//GEN-END:variables
}
