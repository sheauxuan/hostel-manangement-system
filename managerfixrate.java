/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop_grp_assignment;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.Scanner;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
/**
 *
 * @author HP
 */
public class managerfixrate extends javax.swing.JFrame {
    private String filepath = "roomrateInfo.txt";
    private String managerName;
    private String tpNum;
    private String Password;
    private String email;
    /**
     * Creates new form managerfixrate
     */
    public managerfixrate(String managerName, String tpNum, String Password, String email) {
        this.managerName = managerName;
        this.tpNum = tpNum;
        this.Password = Password;
        this.email = email;
        initComponents();
        DefaultTableModel model = (DefaultTableModel) fixratetable.getModel();
        setTableAlignment();
        loadRatesFromFile();
    }
    private void setTableAlignment() {
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.LEFT);  // Align text to left

        // Apply the renderer to all columns
        for (int i = 0; i < fixratetable.getColumnCount(); i++) {
            fixratetable.getColumnModel().getColumn(i).setCellRenderer(renderer);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fixratetable = new javax.swing.JTable();
        updateratebutton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        fixrateback = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(80, 118, 135));

        fixratetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Single", null},
                {"Twins", null},
                {"Triple", null},
                {"Quad", null}
            },
            new String [] {
                "Room Type", "Room Rate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(fixratetable);

        updateratebutton.setText("UPDATE");
        updateratebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateratebuttonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(56, 75, 112));

        fixrateback.setText("BACK");
        fixrateback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixratebackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(fixrateback)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(fixrateback)
                .addGap(14, 14, 14))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel1.setText("APU HOSTEL RATE");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(updateratebutton)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateratebutton)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void loadRatesFromFile() {
    try {
        DefaultTableModel model = (DefaultTableModel) fixratetable.getModel();
        
        model.setRowCount(0); 

        BufferedReader br = new BufferedReader(new FileReader(filepath));

        String line;
        String roomType = null;
        
        while ((line = br.readLine()) != null) {
            if (line.startsWith("RoomType:")) {
                roomType = line.split(":")[1].trim(); // Extract RoomType
            } else if (line.startsWith("Rate:")) {
                String rate = line.split(":")[1].trim(); // Extract Rate
                model.addRow(new Object[]{roomType, rate}); // Add room type and rate to table
            }
        }

        br.close();
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading rates from file.");
    }
}
    
    private void updateratebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateratebuttonActionPerformed
        try {
        String rateFilePath = "roomrateInfo.txt";  
        String paymentFilePath = "userPayment.txt";  

        BufferedReader rateReader = new BufferedReader(new FileReader(rateFilePath));
        StringBuilder rateFileContent = new StringBuilder();
        String line;

        while ((line = rateReader.readLine()) != null) {
            rateFileContent.append(line).append("\n");
        }
        rateReader.close();

        String[] rateFileLines = rateFileContent.toString().split("\n");

        BufferedReader paymentReader = new BufferedReader(new FileReader(paymentFilePath));
        StringBuilder paymentFileContent = new StringBuilder();

        while ((line = paymentReader.readLine()) != null) {
            paymentFileContent.append(line).append("\n");
        }
        paymentReader.close();

        String[] paymentFileLines = paymentFileContent.toString().split("\n");

        for (int i = 0; i < fixratetable.getRowCount(); i++) {
            String roomTypeInTable = (String) fixratetable.getValueAt(i, 0);  
            String newRateInTable = String.valueOf(fixratetable.getValueAt(i, 1));  

            if (newRateInTable.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Rate cannot be empty for room type: " + roomTypeInTable);
                return; 
            }

            try {

                Double.parseDouble(newRateInTable);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Rate must be a valid number for room type: " + roomTypeInTable);
                return; 
            }

            // Update the room rate file
            for (int j = 0; j < rateFileLines.length; j++) {
                if (rateFileLines[j].toLowerCase().startsWith("roomtype: " + roomTypeInTable.toLowerCase())) {
                    rateFileLines[j + 1] = "Rate: " + newRateInTable;  
                    break;
                }
            }

            for (int j = 0; j < paymentFileLines.length; j++) {
                if (paymentFileLines[j].toLowerCase().startsWith("room type: " + roomTypeInTable.toLowerCase())) {
                    int currentIndex = j;

                    while (++currentIndex < paymentFileLines.length && !paymentFileLines[currentIndex].trim().isEmpty()) {
                        String paymentLine = paymentFileLines[currentIndex];

                        if (paymentLine.contains("[Date]") && paymentLine.contains("[RECEIPT-]")) {
                            paymentFileLines[currentIndex] = paymentLine.replaceFirst("(?<=\\d{4}: )\\d+", newRateInTable);
                        }
                    }
                }
            }
        }

        BufferedWriter rateWriter = new BufferedWriter(new FileWriter(rateFilePath));
        for (String updatedLine : rateFileLines) {
            rateWriter.write(updatedLine + "\n");
        }
        rateWriter.close();

        BufferedWriter paymentWriter = new BufferedWriter(new FileWriter(paymentFilePath));
        for (String updatedLine : paymentFileLines) {
            paymentWriter.write(updatedLine + "\n");
        }
        paymentWriter.close();

        JOptionPane.showMessageDialog(this, "Rates and payment information updated successfully!");
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating rates and payment information.");
    }


    }//GEN-LAST:event_updateratebuttonActionPerformed

    private void fixratebackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixratebackActionPerformed
        Main_pageManager mp = new Main_pageManager(managerName, tpNum, Password, email);
        mp.setVisible(true);  
        this.dispose();
    }//GEN-LAST:event_fixratebackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    // Set the Nimbus look and feel
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (Exception ex) {
        java.util.logging.Logger.getLogger(managerfixrate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    // Example: Create an instance of managerfixrate with dummy parameters
    String managerName = "LimJay";
    String tpNum = "MNG999";
    String Password = "manager123456";
    String email = "aaa@GMAIL.COM";

    // Create and display the form
    java.awt.EventQueue.invokeLater(() -> {
        new managerfixrate(managerName, tpNum, Password, email).setVisible(true);
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fixrateback;
    private javax.swing.JTable fixratetable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton updateratebutton;
    // End of variables declaration//GEN-END:variables
}
